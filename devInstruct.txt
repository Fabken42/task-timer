-MODO POMODORO
-DARK MODE?

OK
1. Planejamento Geral
Antes de codar, faça um planejamento básico para entender os principais componentes e funcionalidades da aplicação:

Componentes principais:
Task Table (lista de tarefas)
Task Timer (temporizador para a tarefa)
Controle de Estado (usando Redux ou Context API, opcionalmente)

OK
2. Task Table - Começar pela funcionalidade básica
O TaskTable é o coração do seu app, então é importante começar com uma lista básica de tarefas e, em seguida, adicionar funcionalidades.

OK
Funcionalidades básicas (versão 1)
Exibir tarefas: Crie uma tabela simples com colunas de "Nome", "Duração" e "Objetivo".
Comece com tarefas armazenadas diretamente no estado local (useState).
Adicionar e remover tarefas: Permita que o usuário adicione novas tarefas e remova tarefas existentes.
Botão para adicionar novas tarefas.
Cada linha da tabela com um botão de "remover" ao lado.
Edição inline: Permita a edição direta dos campos da tarefa (nome, duração, objetivo).
Adicione campos de input para cada célula editável, vinculados ao estado.
Exemplo de versão inicial:

Tabela funcional onde é possível visualizar, adicionar, editar e remover tarefas.
Sem lógica complexa de status ou interação com outras partes do app ainda.


Funcionalidades intermediárias (versão 2)
Salvar tarefas no redux: Implemente o salvamento e carregamento de tarefas no redux, para que elas persistam após recarregar a página.




3. Task Timer - Adicionar o temporizador
Agora que você tem as tarefas listadas, é hora de introduzir o componente TaskTimer, que permitirá o controle de tempo para cada tarefa.

Funcionalidades básicas (versão 1)
Iniciar/Pausar temporizador: O temporizador começa a contar o tempo da tarefa quando o usuário clica em "Iniciar". Permita a pausa e o reinício do timer.
O timer pode ser baseado no tempo restante (timeLeft), calculado em minutos e segundos.
Interagir com uma tarefa selecionada: O temporizador deve ser vinculado a uma tarefa específica, com base na seleção da tabela de tarefas.
Comece com a seleção passando o índice da tarefa diretamente via props.
Funcionalidades intermediárias (versão 2)
Término do temporizador: Quando o temporizador atingir zero, exiba uma notificação ou modal pedindo ao usuário para marcar a tarefa como "concluída" ou "pendente".
Som ao término: Adicione efeitos sonoros (como o som de término) usando a biblioteca useSound.
4. Integração entre Task Table e Task Timer
Após as funcionalidades principais dos dois componentes estarem implementadas, você pode começar a integrá-los:

Ao clicar em uma tarefa na TaskTable, o temporizador do TaskTimer deve ser atualizado com os dados dessa tarefa.
Quando uma tarefa for concluída ou pausada, o TaskTable deve refletir essa mudança (como marcar a tarefa como "concluída").
5. Adicionar Status para Tarefas
Agora que o timer está integrado, adicione status às tarefas:

Status de tarefa: Tarefas podem ter os status "pendente", "em andamento", ou "concluída".
Isso pode ser feito adicionando uma nova coluna status no estado de tarefas.
Modifique a aparência da linha na tabela (TaskTable) para refletir o status de cada tarefa (ex: cores diferentes para tarefas completas e pendentes).
6. Persistência e Controle Global com Redux (ou Context API)
Uma vez que os componentes estão funcionando de forma básica e integrada, é um bom momento para introduzir um gerenciamento de estado global para controlar melhor o fluxo de dados.

Passos para introduzir Redux:
Configurar Redux: Inicialize o Redux com um store e um reducer que controla o estado de tasks.
Crie actions para adicionar, editar, remover e atualizar o status das tarefas.
Conectar Redux ao TaskTable e TaskTimer:
Substitua o uso de useState pelos estados globais no Redux.
O TaskTimer e o TaskTable devem despachar ações para o Redux quando uma tarefa é concluída, editada ou quando o status mudar.

7. Testes e Refinamento
Depois que as funcionalidades principais estiverem funcionando, teste bem:

Testar usabilidade: As interações são intuitivas? O fluxo do usuário está claro?
Testar desempenho: Como a aplicação se comporta com muitas tarefas?
8. Funcionalidades extras
Com tudo funcionando corretamente, adicione funcionalidades extras:

Filtragem e ordenação: Permita que o usuário filtre ou ordene as tarefas por status ou nome.
Notificações: Adicione notificações visuais quando uma tarefa for concluída ou quando o tempo estiver perto do fim.
Autenticação de usuários: Se quiser salvar as tarefas para múltiplos usuários, adicione autenticação e integre com um backend.
Integração com APIs externas: Se necessário, adicione suporte para sincronizar as tarefas com um servidor ou API externa.